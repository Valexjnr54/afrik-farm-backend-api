
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  email: 'email',
  role: 'role',
  profile_image: 'profile_image',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  username: 'username',
  email: 'email',
  phone_number: 'phone_number',
  role: 'role',
  countryId: 'countryId',
  stateId: 'stateId',
  lgaId: 'lgaId',
  profile_image: 'profile_image',
  verification_code: 'verification_code',
  email_verified: 'email_verified',
  status: 'status',
  password: 'password',
  temporal_password: 'temporal_password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  iso2: 'iso2',
  iso3: 'iso3',
  numericCode: 'numericCode',
  phoneCode: 'phoneCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LgaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  stateId: 'stateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FarmerScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  email: 'email',
  phone_number: 'phone_number',
  address: 'address',
  nin: 'nin',
  profile_image: 'profile_image',
  proof_of_address: 'proof_of_address',
  bankId: 'bankId',
  account_number: 'account_number',
  account_name: 'account_name',
  countryId: 'countryId',
  stateId: 'stateId',
  lgaId: 'lgaId',
  email_verified: 'email_verified',
  phone_verified: 'phone_verified',
  nin_verified: 'nin_verified',
  has_subscribed: 'has_subscribed',
  status: 'status',
  account_created_by: 'account_created_by',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  farmerId: 'farmerId',
  amount: 'amount'
};

exports.Prisma.FarmScalarFieldEnum = {
  id: 'id',
  farmerId: 'farmerId',
  name: 'name',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  type: 'type',
  production_type: 'production_type',
  size: 'size',
  sizeUnit: 'sizeUnit',
  stage: 'stage',
  ownershipDocument: 'ownershipDocument',
  number_of_workers: 'number_of_workers',
  verified: 'verified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FarmMediaScalarFieldEnum = {
  id: 'id',
  farmId: 'farmId',
  url: 'url',
  mediaType: 'mediaType',
  latitude: 'latitude',
  longitude: 'longitude',
  caption: 'caption',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationCodeScalarFieldEnum = {
  identifier: 'identifier',
  code: 'code',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AdminOrderByRelevanceFieldEnum = {
  fullname: 'fullname',
  email: 'email',
  profile_image: 'profile_image',
  password: 'password'
};

exports.Prisma.UsersOrderByRelevanceFieldEnum = {
  fullname: 'fullname',
  username: 'username',
  email: 'email',
  phone_number: 'phone_number',
  profile_image: 'profile_image',
  verification_code: 'verification_code',
  password: 'password'
};

exports.Prisma.CountryOrderByRelevanceFieldEnum = {
  name: 'name',
  iso2: 'iso2',
  iso3: 'iso3',
  numericCode: 'numericCode',
  phoneCode: 'phoneCode'
};

exports.Prisma.StateOrderByRelevanceFieldEnum = {
  name: 'name',
  code: 'code'
};

exports.Prisma.LgaOrderByRelevanceFieldEnum = {
  name: 'name',
  code: 'code'
};

exports.Prisma.FarmerOrderByRelevanceFieldEnum = {
  fullname: 'fullname',
  email: 'email',
  phone_number: 'phone_number',
  address: 'address',
  nin: 'nin',
  profile_image: 'profile_image',
  proof_of_address: 'proof_of_address',
  account_number: 'account_number',
  account_name: 'account_name'
};

exports.Prisma.BankOrderByRelevanceFieldEnum = {
  name: 'name',
  code: 'code'
};

exports.Prisma.FarmOrderByRelevanceFieldEnum = {
  name: 'name',
  location: 'location',
  production_type: 'production_type',
  ownershipDocument: 'ownershipDocument'
};

exports.Prisma.FarmMediaOrderByRelevanceFieldEnum = {
  url: 'url',
  caption: 'caption'
};

exports.Prisma.VerificationCodeOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  code: 'code'
};
exports.Role = exports.$Enums.Role = {
  lga_admin: 'lga_admin',
  country_admin: 'country_admin',
  state_admin: 'state_admin',
  investor: 'investor',
  super_admin: 'super_admin'
};

exports.Status = exports.$Enums.Status = {
  Available: 'Available',
  Pending: 'Pending',
  Completed: 'Completed',
  Rejected: 'Rejected',
  Approved: 'Approved',
  Inactive: 'Inactive',
  Active: 'Active',
  Suspend: 'Suspend'
};

exports.ProductionType = exports.$Enums.ProductionType = {
  Crop: 'Crop',
  Livestock: 'Livestock'
};

exports.SizeUnit = exports.$Enums.SizeUnit = {
  Hectare: 'Hectare',
  Acre: 'Acre'
};

exports.FarmStage = exports.$Enums.FarmStage = {
  Cleared: 'Cleared',
  Planted: 'Planted',
  Harvesting: 'Harvesting'
};

exports.MediaType = exports.$Enums.MediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  Users: 'Users',
  Country: 'Country',
  State: 'State',
  Lga: 'Lga',
  Farmer: 'Farmer',
  Bank: 'Bank',
  Invoice: 'Invoice',
  Farm: 'Farm',
  FarmMedia: 'FarmMedia',
  VerificationCode: 'VerificationCode'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
